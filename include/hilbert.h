#pragma once

// coefficient magic and AP topology
// credit to: http://yehar.com/blog/?p=368
class HilbertTransform 
{
public:
	HilbertTransform();
	virtual ~HilbertTransform() {}
	float real(float in); 
	float imaginary(float in); 

private:
	struct OneMultAllpass
	{
		float coeff;
		float y1; // only used to populate y2
		float y2; // 2nd order feedback
		float x1; // only used to populate x2
		float x2; // 2nd order delay
		OneMultAllpass()
			: coeff(0.f)
			, y1(0.f)
			, y2(0.f)
			, x1(0.f)
			, x2(0.f)
		{}

	};

	// these coefficients were generated by sorcery
	const double ap1_a = 0.6923878;
	const double ap1_b = 0.9360654322959;
	const double ap1_c = 0.9882295226860;
	const double ap1_d = 0.9987488452737;

	const double ap2_a = 0.4021921162426;
	const double ap2_b = 0.8561710882420;
	const double ap2_c = 0.9722909545651;
	const double ap2_d = 0.9952884791278;

	OneMultAllpass m_ap1[4];
	OneMultAllpass m_ap2[4];

	float x1; // unit delay
};